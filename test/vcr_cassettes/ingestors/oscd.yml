---
http_interactions:
- request:
    method: get
    uri: https://osc-delft.github.io/events
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '12145'
      Server:
      - GitHub.com
      Content-Type:
      - text/html; charset=utf-8
      Permissions-Policy:
      - interest-cohort=()
      Last-Modified:
      - Fri, 09 Jun 2023 11:08:05 GMT
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=31556952
      Etag:
      - W/"64830815-2f71"
      Expires:
      - Mon, 21 Oct 2024 14:35:24 GMT
      Cache-Control:
      - max-age=600
      X-Proxy-Cache:
      - MISS
      X-Github-Request-Id:
      - FB2D:0DB5:44C9AE3:46C3AEA:67166454
      Accept-Ranges:
      - bytes
      Age:
      - '0'
      Date:
      - Mon, 21 Oct 2024 15:06:48 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-ams2100084-AMS
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1729523208.413896,VS0,VE97
      Vary:
      - Accept-Encoding
      X-Fastly-Request-Id:
      - e784ffe238a0a9d1f10db12b038ed739fc67bfe9
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 03 Jan 2019 08:00:00 GMT
recorded_with: VCR 6.2.0
