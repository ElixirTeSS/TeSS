ARG RUBY_VERSION=3.2.2
FROM ruby:$RUBY_VERSION-slim AS base

# Install essential dependencies
RUN apt-get update && apt-get install -y \
  build-essential \
  curl \
  file \
  git \
  gnupg2 \
  imagemagick \
  libpq-dev \
  nodejs && rm -rf /var/lib/apt/lists/*  # Cleanup to avoid permission issues

RUN mkdir -p /code
# Create a non-root user with a home directory and assign ownership to the user
RUN useradd -m -u 1001 -U -s /bin/sh -d /code appuser

RUN chown -R appuser:appuser /code

USER appuser

# Set the working directory
WORKDIR /code


# Switch to the non-root user
#USER appuser
#RUN chmod u+w /code
COPY . .


RUN bundle install
USER root
RUN if [ -n "$SOURCE_COMMIT" ] ; then echo $SOURCE_COMMIT > config/.git-revision ; fi
RUN chown -R appuser:appuser solr config docker public /code db/schema.rb

# Install supercronic - a cron alternative
ENV SUPERCRONIC_URL=https://github.com/aptible/supercronic/releases/download/v0.1.12/supercronic-linux-amd64 \
    SUPERCRONIC=supercronic-linux-amd64 \
    SUPERCRONIC_SHA1SUM=048b95b48b708983effb2e5c935a1ef8483d9e3e

RUN curl -fsSLO "$SUPERCRONIC_URL" \
 && echo "${SUPERCRONIC_SHA1SUM}  ${SUPERCRONIC}" | sha1sum -c - \
 && chmod +x "$SUPERCRONIC" \
 #&& mv "$SUPERCRONIC" "/tmp/${SUPERCRONIC}" \
 #&& sudo mv "/tmp/${SUPERCRONIC}" "/usr/local/bin/${SUPERCRONIC}" \
 && mv "$SUPERCRONIC" "/usr/local/bin/${SUPERCRONIC}" \
 && ln -s "/usr/local/bin/${SUPERCRONIC}" /usr/local/bin/supercronic

# Switch back to the non-root user
USER appuser


# Set the entry point
ENTRYPOINT ["docker/entrypoint.sh"]

# Expose port 3000
EXPOSE 3000

# Development stage
FROM base AS development

# Command to start the Rails server in development mode
CMD bundle exec rails server -b 0.0.0.0

# Production stage
FROM base AS production
USER appuser
# Copy Gemfile and Gemfile.lock to the container
COPY Gemfile Gemfile.lock ./

# Install gems
RUN bundle check || bundle install

# Copy the application code
COPY . .
USER root
RUN mkdir -p /code/public/assets && chown -R appuser:appuser /code
RUN touch /code/tess.crontab && chown -R appuser:appuser /code/tess.crontab
USER appuser
# Precompile assets
RUN bundle exec rake assets:precompile 

# Run the Rails server, bind for Docker
CMD bundle exec whenever > /code/tess.crontab \
    && (supercronic /code/tess.crontab &) \
    && bundle exec rails server -b 0.0.0.0
