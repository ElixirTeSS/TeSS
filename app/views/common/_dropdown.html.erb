<%#
PARAMETERS:
f - the form 
resource - The object you wish to modify e.g. #<Material id: 99....
field_label - The label shown in the view above the field, e.g. "Packages"
field_name  - The name of the form field, e.g. "package_ids"
options     - Array of pairs to populate the dropdown with. The first value is the key which is displayed, and the
              second value is the actual value that is submitted to the controller
existing    - Existing values. Format as above.


Example Usage
render :partial => 'common/dropdown', 
     :locals => {:f => f,
                 :resource => @package,
                 :field_label => 'Materials',
                 :field_name => 'material_ids',
                 :options => Material.all
                 :existing => @package.materials
     }
 %>

<%
  model_name ||=  resource.class.name.underscore # e.g. package
  options ||= format_for_dropdown(field_name.capitalize.constantize.all)
  existing ||= format_for_dropdown(resource.send(field_name.pluralize))

  # Remove existing objects from the pool of options
  options = options - existing
  dropdown_toggle_button_name ||= ''
  if dropdown_toggle_button_name.blank?
    dropdown_toggle_button_name = "Add #{field_name.to_s.sub(/_ids?\z/, '').humanize}"
  end

  # show the required label?
  required ||= false

  # Name for the dropdown toggle button, if not specified will be set to 'Add <field_name>
  field_label ||= field_name.pluralize.capitalize unless field_name.blank?

  # check error count
  errors ||= []

  # check title
  title ||= ''
%>

<div class="form-group<%= ' has-error' if errors.size > 0 %>">

  <% if required %><label class="control-label string required"><abbr title="required">*</abbr></label><% end %>
  <%= f.label field_label, class: 'control-label' %>
  <%= f.field_lock(field_name.to_sym) if f.object.respond_to?(:locked_fields) %>

  <%= f.error field_name.to_sym %>

  <div data-field="<%= field_name %>" data-model="<%= model_name %>" title='<%= title %>'>
    <%# display existing ones %>
    <ul class="<%= field_name %>">
      <%# have one empty one so something is always passed when the event listener triggers %>
      <input name="<%= model_name %>[<%= field_name %>][]" value="" type="hidden"/>
      <% existing.each do |r| %>
          <li>
            <%= r[0] %>
            <input type="hidden" data-field="<%= field_name %>" name="<%= model_name %>[<%= field_name %>][]" value="<%= r[1] %>" />
            <input type="button" value="<%= "&times;".html_safe %>" class="dropdown-option-delete delete-icon"
                   data-field="<%= field_name %>" data-model='<%= model_name %>'
                   data-value="<%= r[1] %>" data-name="<%= r[0] %>" />
          </li>
      <% end %>
    </ul>

    <%# Create list of dropdown options%>
    <div class="dropdown">
      <button class="btn btn-default dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
        <%= dropdown_toggle_button_name %>
        <span class="caret"></span>
      </button>
      <ul class="dropdown-menu <%= field_name %>-options"
          data-field="<%= field_name %>" data-model="<%= model_name %>"
          id="<%= field_name %>_packages">
        <% options.each do |r| %>
            <li class="dropdown-option" id="<%= field_name %>-id-<%= r[1] %>" data-value="<%= r[1] %>">
              <a><span title="<%= r[2] %>"><%= r[0] %></span></a>
            </li>
        <% end %>
      </ul>
    </div>
  </div>

</div>
